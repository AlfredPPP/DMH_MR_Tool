Project Overview
The DMH_MR_Tool is a lightweight internal automation utility designed to streamline the manual process of collecting, extracting, and processing Australian financial market data—such as distribution and component details—from external sources like ASX, iShares, BetaShares, Vanguard, or internal repositories.
It helps users identify relevant updates, extract key data from Excel or PDF reports, and input information into the MR (Master Rate) tab of the internal DMH (Data Management Hub) system based on client-specific business rules.
The tool aims to reduce daily processing time (from 2–3 hours to under 30 minutes) and minimize human error, improving both efficiency and data accuracy.
Technical Architecture
•	Type: Desktop application built with Python and PySide6.
•	Target Users: Single-user environment; not designed for concurrent access.
•	Tech Stack:
o	UI: PySide6
o	Data storage: SQLite3
o	Async I/O: aiohttp, aiosqlite
•	Deployment Strategy:
o	Code is packaged via internal company macro into a .deploy file.
o	.deploy is uploaded to the GMAS platform.
o	End users download a .gmas file (~8KB) and run it via Automation Launcher.
o	Automation Launcher loads code from the cloud and runs it using a built-in Python interpreter.
•	Performance Considerations:
o	Small-scale data volume (~10–20 records/day).
o	Local SQLite3 used for temporary storage.
o	Tool runs asynchronously where possible, but overall usage is light and single-threaded.
•	Compatibility Risks:
o	Automation Launcher uses a predefined Python environment.
o	Dependency versions may differ from local dev setup, occasionally leading to runtime issues after deployment.
o	All the hard code vars (e.g., websites address, database address, local/remote file path etc.) must be set in a configuration file, i.e., “.ini” file, in a shared drive (not packaged in the project).
Data Specifications 
Data Sources & Formats
•	ASX
o	Announcement Metadata:
	Fetched via HTML scraping from:
[Announcement Search by ASX Code and year] https://www.betashares.com.au/fund/high-interest-cash-etf/#announcements
[Daily Announcements] https://www.asx.com.au/markets/trade-our-cash-market/todays-announcements
	Data includes announcement title, publish date, URL, and associated ASX code(Ticker).
	Parsed using XPath; stored in SQLite.
o	Announcement Documents:
	Downloaded PDFs (e.g. distribution statements) based on metadata URLs.
•	Vanguard
o	JSON API returns latest component data for all tickers.
o	Includes: ticker, component values, publish date, ex-date, etc.
o	Internal mapping used to align Vanguard-specific component names with DMH nomenclature.
•	BetaShares
o	HTML scraped from fund-specific URLs (e.g., https://www.betashares.com.au/fund/<fund-name>#announcements).
o	Fund list (~20 funds) cycled through; each returns a list of announcements.
o	Parsed using XPath; similar structure to ASX.
•	iShares
o	[To be integrated] — source and structure TBD.
•	Processing Logic & Update Frequency
o	ASX Daily Feed: Queried once per day to ingest all new announcements.
o	ASX by Ticker: Queried on demand (typically ~10 lookups/day) based on DMH exceptions.
o	BetaShares/Vanguard: Queried periodically (~10 times/month) during expected reporting windows.
o	PDF Downloads:
	Triggered when announcements are matched to DMH exception tickers.
	Stored in a shared network drive and marked as "downloaded" in the announcement database.
	PDF formats vary significantly across issuers; ASX only hosts documents and does not standardize their structure. The tool supports 5–6 common layout patterns and handles ~10+ edge cases using custom parsers.
•	Data Volume & Performance
o	Volume Estimates:
	~100–200 announcement entries/day across all sources.
	~1–5 PDFs downloaded on regular days, with peaks of 10–30/day during monthly reporting periods.
o	Growth Expectations:
	Data volume remains low and predictable.
	No significant scaling concerns due to single-user desktop nature.
•	Storage & Retention Policies
o	Metadata (announcements):
	Stored in a SQLite database hosted on a shared network drive.
	Lightweight structure (ASX code, title, date, URL, download status).
	Intended for long-term retention with no purge policy.
o	Documents (PDFs):
	Stored in a shared network drive.
	Manually cleaned by developers once per year to conserve space. 
Database Schema Details
This tool uses a lightweight SQLite3 database to cache and track downloaded financial announcement metadata and related information. Below are the core tables and their structures.
•	Table asx_info
Stores metadata for announcements retrieved from the ASX website based on ASX code or daily queries.
CREATE TABLE if not exists asx_info (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    asx_code TEXT NOT NULL,
    title TEXT NOT NULL,
    pub_date DATE NOT NULL,
    pdf_url TEXT,
    pdf_mask_url TEXT,
    page_num INTEGER NOT NULL,
    file_size TEXT NOT NULL,
    downloaded INTEGER DEFAULT 0,     -- 0 = not downloaded, 1 = downloaded, 2 = failed
    parsed INTEGER DEFAULT 0,     -- 0 = not parsed, 1 = successfully parsed, 2 = error occurred while parsing(failed parsed)
    update_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    update_user TEXT NOT NULL
);

CREATE index if not exists info_code_date on asx_info(asx_code, pub_date);
o	asx_code: ASX ticker code (e.g., "FLO")
o	title: Announcement title
o	pub_date: Publish date of the announcement(yyyy-mm-dd)
o	pdf_url: Direct link to the PDF announcement, can only get by parsing pdf_mask_url.
o	pdf_mask_url: Link to the actual PDF’s url (pdf_url), stored in the info page html.
o	page_num: Page number of the PDF announcement
o	file_size: File size of the PDF announcement
o	downloaded: Flag indicating if the PDF has been downloaded
o	parsed: Flag indicating if the PDF has been parsed to business data and stored
o	update_timestamp: Timestamp of when the record was last updated. Defaults to the current system timestamp at insertion
o	update_user: Username of the user who last updated or inserted the record. Required
Sample rows:
column	Row_1	Row_2
id	1	2
asx_code	FLO	VAS
title	Dividend component details	Distribution Tax Estimates
pub_date	2025-03-11	2025-02-07
pdf_url	https://announcements.asx.com.au/asxpdf/20250624/pdf/06l1zp5dnpnylp.pdf	https://announcements.asx.com.au/asxpdf/20250702/pdf/06ld3q9c94dgw9.pdf
pdf_mask_url	https://www.asx.com.au/asx/v2/statistics/displayAnnouncement.do?display=pdf&idsId=02991191	https://www.asx.com.au/asx/v2/statistics/displayAnnouncement.do?display=pdf&idsId=02989728
page_num	15	2
file_size	315.8 kb	171.0 kb
downloaded	1	0
parsed	2	0
update_timestamp	1753886256	1753886264
update_user	Alfred	Colin


•	Table asx_nz_data
Stores parsed financial data extracted from ASX/NZ announcements. Each row represents a structured data entry linked to an announcement (via info_id) and mapped to a corresponding asset_id in the DMH system.
create table if not exists asx_nz_data(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    asx_code TEXT,
    info_id INTEGER NOT NULL,
    pub_date DATE, 
    asset_id TEXT,
    ex_date DATE,
    pay_date DATE,
    currency TEXT, 
    income_rate numeric(8,8),
    aud2nzd numeric(8,8),
    franked_pct numeric(8,8),
    total numeric(8,8),
    unfranked_pct numeric(8,8),
    supplementary_dividend numeric(8,8),
    tax_rate numeric(8,8),
);

create index if not exists nz_code_exdate on asx_nz_data(asx_code, ex_date);
create index if not exists nz_id on asx_nz_data(info_id);
o	asx_code: ASX ticker code (e.g., "FLO")
o	info_id: Foreign key referencing announcement metadata (asx_info.id)
o	pub_date: Publish date of the announcement(yyyy-mm-dd)
o	asset_id: Identifier from the DMH system (used for matching exceptions)
o	Other columns represent component-level financial data extracted via regular expressions from downloaded PDFs. These are used downstream by business operations and are not expected to be interpreted or modified by developers.

•	Table vanguard
Stores metadata for announcements retrieved from the ASX website based on ASX code or daily queries.
create table if not exists vanguard_data(
    id integer primary key autoincrement,
    port_id text,
    fund_name text,
    ticker text,
    apir text,
    fund_currency text,
    as_of_date date,
    ex_dividend_date date,
    payable_date date,
    reinvestment_date date,
    record_date date,
    cpu text,
    update_timestamp DATETIME default CURRENT_TIMESTAMP
    CGCL text,
    --other columns...
    CGDW text,
    INC text
);

create table if not exists vanguard_mapping(
    id integer primary key autoincrement,
    port_id text,
    asset_id text,
    ticker text,
    apir text,
    is_valid integer,
    update_timestamp DATETIME default CURRENT_TIMESTAMP
);

create table if not exists column_map(
    id integer primary key autoincrement,
    v_code text,  -- component code in vanguard website
    v_desc text,  -- description of this component in vanguard website
    d_code text,  -- component code in DMH backend database system
    d_desc text,  -- description of this component in DMH MR UI
    is_valid text,
    update_timestamp DATETIME default CURRENT_TIMESTAMP
);

create index if not exists map_port_id on vanguard_mapping(port_id);
create index if not exists data_port_id on vanguard_data(port_id);
create unique index if not exists data_ticker_apir_re_date on vanguard_data(ticker, apir, reinvestment_date);
create index if not exists map_ticker_apir_re_date on vanguard_mapping(asset_id, ticker, apir);

•	Table sys_log
Tracks all major user actions performed in the DMH_MR_Tool for monitoring, performance analysis, and debugging.
CREATE TABLE IF NOT EXISTS sys_log (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    update_timestamp DATETIME default CURRENT_TIMESTAMP,
    user_id TEXT NOT NULL,
    action TEXT NOT NULL,
    -- Action name, e.g., "launch_tool", "download_pdf", "update_dmh"
    detail TEXT,
    -- JSON/text blob for storing structured metadata (e.g., ticker, file path, status)
    success INTEGER DEFAULT 1,
    -- 1 for success, 0 for failure
    duration_ms INTEGER
    -- Optional: time taken to complete the action
);

•	Table parse_template
Templates used to parse .xlsx or .pdf data in the Parse Interface. Each column name is a component code in DMH backend database system. For parse_template_mr, the column names related to d_code in column_map table. For parse_template_nz, the column names related to column names in table asx_nz_data.
create table if not exists parse_template_mr(
    id integer primary key autoincrement,
    template_name text, -- e.g. vanguard_au, asx_mit_notice, perpetual, etc
    INC_RAT text,
    DOM_INC text,
    DOM_DID text,
    -- ... other fields
    FOR_INC text,
    is_valid text,
    update_timestamp DATETIME default CURRENT_TIMESTAMP
);

create table if not exists parse_template_nz(
    id integer primary key autoincrement,
    template_name text, -- e.g. asx_dividend, perpetual, etc
    currency TEXT, 
    income_rate TEXT,
    aud2nzd TEXT,
    franked_pct TEXT,
    total TEXT,
    unfranked_pct TEXT,
    supplementary_dividend TEXT,
    tax_rate TEXT,
    is_valid text,
    update_timestamp DATETIME default CURRENT_TIMESTAMP
);


UI System
Home Interface:
Software Usage Dashboard/Overview
Spider Interface:
Show the latest data update time of each website in database (update_timestamp column in asx_info table)
Download the latest day's data information from a custom website (for ASX, user can only download today’s data, and the previous business day’s data)
Download a specific company’s whole year announcements information from ASX website (user should input the ASX code and the Year)
Activate daily spider process (Update the latest information from each website, not included in pdf downloading. Only fetch the daily information, for ASX, it’s the previous business day’s announcements information.)
Note: The pdf file downloading process will not be triggered in this interface, it will be triggered in the “Fetch” button in the MR Update Interface, since it costs a lot of storage, and only needed ones should be downloaded.
A log activities area will show to display the spider’s current workflow.
An info bar would pop out if any errors occurred.
Parse Interface:
The Parse Interface allows users to upload and process source documents containing dividend or component data (commonly in PDF or XLSX format).
Users can drag and drop a file into the designated drop area (styled in gray, Google-like) and select a parsing template. The parsing template maps source data fields to the DMH backend column definitions (from the column_map table, using the d_desc column).
After parsing, the results are displayed in a structured form with the following columns:
Column Name 1 in DB | re pattern 1 | (value after parsed, editable) | comment
Column Name 2 in DB | re pattern 2 | (value after parsed, editable) | comment
Some fields are not parsed directly from the file. Instead, predefined business rules apply (e.g., the sum of multiple fields). These rules are automatically shown in the Comment column.
E.g.
Template asx_mit_notice:
Column Name	re pattern	value	comment
ex_date	2A\\.5\\.s+Ex Date\\s*\n?(\\d{1,2}/\\d{1,2}/\\d{4}	2024-09-19	
income_rate	2A\\.9[\\d\\D]*?(?:AUD|NZD|USD)\\s(.*?)\\n	0.4	
tax_rate		0.3	Default value per client specific

The form always contains all rows defined in column_map.d_desc. If a field’s value is None, the row is hidden by default.
Users may add extra rows manually by selecting from a dropdown list of available d_desc fields and entering values or comments.
If invalid input is detected, an info bar is displayed in the top-right corner of the interface to alert users.
	Data Submission Logic with MR Update Interface:
Once parsing and validation succeed, users may click Submit.
A pop-out dialog prompts the user to provide required header identifiers such as:Client_ID, Asset_ID, Ex_Date, Pay_Date, MR_Income_Rate
The submission package consists of: 1. Business data payload (parsed values and manually input records; basically it is fully visible data in the UI). 2. Header identifiers (collected in the dialog)
After submission, the data package is transferred to the MR Update Interface for integration.
Additional Notes:
Users may ignore the drag-and-drop and instead enter a folder path in another text-input field. All files in the folder are then parsed automatically with the “Hi-Trust UR” template and submitted to the MR Update Interface in batch mode.
MR Update Interface:
	The MR Update Interface displays and manages parsed business records before submission to the DMH system. The central area contains a table widget with fixed columns:
	E.g.
Client_ID	ASX_Code	Fund	Asset_ID	Ex_Date	Pay_Date	MR_Income_Rate	Type	Actoin_bar	status
AURR	PLUS	REUC	902XGW000	20250731	20250806	0.89	Other	Fetch_button|Parse_button	
MBFF	FTO	MAR1	952LEII3	20250701	20251031	0.004461	Last Actual	Fetch_button|Parse_button	
MBFF	AAA	MAR1	999XEL901	20250731	20251031	7.89	Template - PIII	Fetch_button|Parse_button	
Each row corresponds to one record. The visible columns show key identifiers (e.g., Client_ID, Asset_ID), while the detailed business data payload from the Parse Interface is stored in the background and linked to the row.
	Data Synchronization Logic with Parse Interface:
When a submission package arrives from the Parse Interface, the system checks if a record with the same combination of “Client_ID + Asset_ID + Ex_Date + Pay_Date + MR_Income_Rate” already exists in the table.
If a match is found → the row is updated, replacing its background data.
If no match is found → a new row is created with the identifiers and linked payload.
As a result, the MR Update Interface table always reflects the most up-to-date set of business records.
	Real-time submitting status will display in the table’s “Status” column
	User Operations:
Users can paste bulk data into a pop-out table window and save it into the main table.
Records can be selected (with a tick box) and either: Submitted to the DMH system (with real-time status updates in the Status column), or deleted from the interface. A “Select All” option is provided.
Fetch Button: Attempts to retrieve PDF announcements from the asx_info table, using identifiers (ASX_Code + Ex_Date + Pay_Date). If found, the system downloads the PDF (Spider Service will get the real pdf_url from pdf_mask_url), parses it(will left “pending parse” in the Status column, then users can double-click it and select the proper template in the Parse Interface), and finally updates the record’s background data.
Parse Button / Double-Click: Redirects the user to the Parse Interface to preview or edit the full business data of the record, and re-submit it back if necessary.
	Automatically save the backup file (i.e., source flies that received in the Parse Interface, or the file downloaded from the Spider Service after users clicking the “Fetch” button). Save it as a new file in the backup-file path and rename it to {Asset_ID}_{Client_ID}_{Ex_Date in %d%b%Y format}_{EST or ACT} (If the parse template is “Hi-Trust UR”, it will be “ACT”, otherwise it’s “EST”) when updating to DMH successfully (each successfully updated task row will generate one backup file).
Runtime errors trigger a top-right fly-out alert. If errors occur before submission, the user can correct inputs and retry. If errors occur during DMH update, successfully updated rows are marked success, grayed out, and locked, failed or unselected rows remain editable and can be retried.

DB Browser Interface:
	Users can select a database from a drop-down list (the tables in this program)
	Query a remote Sqlite3 database by SQL (Top Area, text field)
	Query result will be displayed (Bottom Area, table widget)
	Data in the query result table can be re-ordered, exported, selected and copied
Manual Interface:
	Display the business logic of the MR Update Interface
Setting Interface:
	Access the software log file in real time
	Modify the log file’s path. download file path, backup-file saved path
Log System:
	Log error while executing python functions, display filename, function name, vars, code line when error raised, can be added in front of a function as a decorator (like loguru)
	Log files will be saved in a certain path, and renew a file when reached 5mb
	If any error occurred, a pop-out window or fly-out window will display to show the error information. For those pre-defined errors, readable information will display. For those unexpected errors, the traceback of python interpreter console’s information will display.
Access Control:
	All users can access the functions of this tool, including SQL queries. But only the developer can execute ADD/UPDATE/DELETE query.
Test System:
	Each business function will have a test unit.
